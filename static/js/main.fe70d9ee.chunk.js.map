{"version":3,"sources":["components/card/card.jsx","components/card-list/CardList.jsx","components/search-box/searchBox.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,aCFPC,G,MAAW,SAAAR,GAAK,OAC5B,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,WCJnCO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACxB,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BGG,E,kDAjCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAEDiB,MAAQ,CACXR,SAAU,GACVS,YAAa,IALE,E,gEASE,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,+BAGjC,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAC3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA5BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fe70d9ee.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => (\n\t<div className='card-container'>\n\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x100`}></img>\n\t\t<h2 key={props.monster.id}>{props.monster.name}</h2>\n\t\t<p>{props.monster.email}</p>\n\t</div>\n)","import React from 'react';\nimport { Card } from '../card/card' \nimport './card-list.styles.css'\n\n\nexport const CardList = props => (\n\t<div className='card-list'>\n\t\t{props.monsters.map(monster => <Card monster={monster} />)}\n\t</div>\n)","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\t<input\n\t\tclassName='search'\n\t\ttype='search' \n\t\tplaceholder={placeholder}\n\t\tonChange={handleChange} \n\t/>\n);\n\n\n","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/CardList';\nimport { SearchBox } from './components/search-box/searchBox';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    \n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder=\"Search Monsters\" \n          handleChange={e => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}